def login(usuario, contrasenia):
    with open("Usuarios.txt", 'r', encoding='utf-8') as archivo:
        listaUsuarios=[]
        listacontraseñas=[]
        for linea in archivo:
            usu, contra = linea.strip().split(".")
            listaUsuarios.append(usu)
            listacontraseñas.append(contra)
        if usuario in listaUsuarios and contrasenia in listacontraseñas:
            return True
        while contrasenia not in listacontraseñas:
            contrasenia = input("Ingrese la contraseña nuevamente: ")
            if contrasenia in listacontraseñas:
                return True

def registrarse(usuario,contrasenia):
    with open("Usuarios.txt", 'a', encoding='utf-8') as archivo:
            archivo.write(f"\n{usuario}.{contrasenia}")
            print("Se creó el usuario")
            return True



class vuelo:
    def __init__(self,nro_vuelo,aeropuerto_salida,aeropuerto_llegada,nro_serie,legajo_piloto,precio):
        self.nro_vuelo=nro_vuelo
        self.aeropuerto_salida=aeropuerto_salida
        self.aeropuerto_llegada=aeropuerto_llegada
        self.nro_serie=nro_serie
        self.legajo_piloto=legajo_piloto
        self.precio=precio
  
    @staticmethod
    def check_nro_vuelo(nro_vuelo):
        while len(nro_vuelo)!=4 or not nro_vuelo.isnumeric():
            nro_vuelo = input("Error, debe ingresar un número de 4 dígitos: ")
    
    @staticmethod
    def check_precio_vuelo(precio):
        while int(precio) < 0 or not precio.isnumeric():
            precio = input("El precio tiene que ser un número positivo: ")

    @staticmethod
    def check_piloto(legajo_piloto,lista_empleado):  
        for empleado in lista_empleado:
            if empleado.legajo == legajo_piloto:
                return empleado.esPiloto()
        return False


class viaje:
    capacidad=5
    def __init__(self,nro_viaje,nro_vuelo,nro_serie,fecha):
        self.nro_viaje=nro_viaje
        self.nro_vuelo=nro_vuelo
        self.nro_avion=nro_serie
        self.fecha=fecha
        self.pasajeros=[]
        self.contador_pasajeros = 0
    

    def eliminarViaje(nro_viaje,lista_viaje):
        for viaje in lista_viaje:
            if viaje.nro_viaje==nro_viaje:
                lista_viaje.pop(viaje)
        return lista_viaje


    def validarNum(tipoDato, min, max):
        ingresado = min - 1
        booleana = False
        while(booleana == False or ingresado < min or ingresado > max):
            try:
                ingresado = int(input("Ingrese "+ tipoDato +": "))
                booleana = True    
            except:
                print("Fecha invalida")       
        return ingresado
    
    def validarFecha():
        import datetime
        año = viaje.validarNum("año", 1900, 2030)
        mes = viaje.validarNum("mes", 1, 12)
        dia = viaje.validarNum("dia", 1, 28)
        return(datetime.date(año, mes, dia))


    @staticmethod
    def check_vuelo(nro_vuelo,lista_vuelo):
        while True:
            for vuelo in lista_vuelo:
                if vuelo.nro_vuelo == nro_vuelo:
                    return nro_vuelo
            nro_vuelo = input("Error, el vuelo no existe. Intente de nuevo.")
    
    @staticmethod
    def check_avion(nro_serie,lista_avion):        
        while True:
            for avion in lista_avion:
                if avion.nro_serie == nro_serie:
                    return nro_serie
            nro_serie = input("Error, el avión no existe. Intente de nuevo.") 


    def agregarpasajero(self,pasajero):
        if self.contador_pasajeros < vuelo.capacidad:
            self.pasajeros.append(pasajero)
            self.contador_pasajeros+=1
            return True
        else:
            return False

    def eliminarpasajero(self,pasajero):
        for i in self.pasajeros:
            if i==pasajero:
                self.pasajeros.pop(pasajero)
                self.contador_pasajeros-=1
                return True
            else:
                return False
            

class avion: #Chequeado funciona bien
    def __init__(self,nro_serie,modelo,fecha_alta,nro_vuelos_actuales,estado):
        self.nro_serie=nro_serie
        self.modelo=modelo
        self.fecha_alta=fecha_alta
        self.nro_vuelos_actuales=nro_vuelos_actuales
        self.estado=estado
        print('Se creo bien')

        
    @staticmethod
    def check_nro_serie(nro_serie):
        while(len(nro_serie)!=10 or nro_serie.isnumeric() is not True ):
            nro_serie=input('Ingrese nuevamente el nro de serie:    ')
        return nro_serie
    @staticmethod
    def check_nro_vuelos_actuales(nro_vuelos_actuales):    
        while(nro_vuelos_actuales!='1' and nro_vuelos_actuales!='0'):
            nro_vuelos_actuales=input('Ingrese nuevamente el nro de vuelos actuales:    ')
        return nro_vuelos_actuales
    @staticmethod
    def check_estado(estado):    
        while(estado not in ['En servicio','Fuera de servicio']):
            estado=input('Ingrese nuevamente el estado del avion:    ')
        return estado
        

    def eliminarAvion(nro_serie,matriz_aviones):
        for i in matriz_aviones:
            if i[0]==nro_serie:
                matriz_aviones.pop(i)
        return matriz_aviones
    

    def check_estado(self,nro_serie):
        if self.nro_serie==nro_serie:
            if self.estado=='Fuera de servicio':
                return False
            else:
                return True 
